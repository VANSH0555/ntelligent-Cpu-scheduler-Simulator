import heapq
from collections import deque

class Process:
    def _init_(self, pid, arrival, burst, priority):
        self.pid = pid
        self.arrival = arrival
        self.burst = burst
        self.priority = priority
        self.remaining_time = burst
        self.completion_time = 0
        self.waiting_time = 0
        self.turnaround_time = 0

def fcfs_scheduling(processes):
    processes.sort(key=lambda x: x.arrival)
    time = 0
    for p in processes:
        if time < p.arrival:
            time = p.arrival
        p.waiting_time = time - p.arrival
        p.turnaround_time = p.waiting_time + p.burst
        p.completion_time = time + p.burst
        time += p.burst

def sjf_scheduling(processes):
    processes.sort(key=lambda x: (x.arrival, x.burst))
    pq = []
    time = 0
    completed = 0
    i = 0
    n = len(processes)
    while completed < n:
        while i < n and processes[i].arrival <= time:
            heapq.heappush(pq, (processes[i].burst, processes[i]))
            i += 1
        if pq:
            burst, p = heapq.heappop(pq)
            p.waiting_time = time - p.arrival
            p.turnaround_time = p.waiting_time + p.burst
            p.completion_time = time + p.burst
            time += p.burst
            completed += 1
        else:
            time += 1

def priority_scheduling(processes):
    processes.sort(key=lambda x: (x.arrival, x.priority))
    pq = []
    time = 0
    completed = 0
    i = 0
    n = len(processes)
    while completed < n:
        while i < n and processes[i].arrival <= time:
            heapq.heappush(pq, (processes[i].priority, processes[i]))
            i += 1
        if pq:
            _, p = heapq.heappop(pq)
            p.waiting_time = time - p.arrival
            p.turnaround_time = p.waiting_time + p.burst
            p.completion_time = time + p.burst
            time += p.burst
            completed += 1
        else:
            time += 1

def round_robin_scheduling(processes, quantum=4):
    queue = deque()
    processes.sort(key=lambda x: x.arrival)
    time = 0
    remaining = len(processes)
    i = 0
    while remaining > 0:
        while i < len(processes) and processes[i].arrival <= time:
            queue.append(processes[i])
            i += 1
        if queue:
            p = queue.popleft()
            executed_time = min(p.remaining_time, quantum)
            p.remaining_time -= executed_time
            time += executed_time
            if p.remaining_time == 0:
                p.completion_time = time
                p.turnaround_time = p.completion_time - p.arrival
                p.waiting_time = p.turnaround_time - p.burst
                remaining -= 1
            else:
                queue.append(p)
        else:
            time += 1

def intelligent_scheduler(processes):
    avg_burst = sum(p.burst for p in processes) / len(processes)
    unique_priorities = len(set(p.priority for p in processes))
    if avg_burst < 8:
        print("Choosing SJF as the best scheduler.")
        sjf_scheduling(processes)
    elif unique_priorities > 3:
        print("Choosing Priority Scheduling.")
        priority_scheduling(processes)
    else:
        print("Choosing Round Robin with dynamic quantum.")
        round_robin_scheduling(processes, quantum=int(avg_burst / 2) + 1)

def display_results(processes):
    print("\nPID\tArrival\tBurst\tPriority\tWaiting\tTurnaround\tCompletion")
    for p in processes:
        print(f"{p.pid}\t{p.arrival}\t{p.burst}\t{p.priority}\t{p.waiting_time}\t{p.turnaround_time}\t{p.completion_time}")

if _name_ == "_main_":
    processes = [
        Process(1, 0, 5, 2),
        Process(2, 1, 3, 1),
        Process(3, 2, 8, 4),
        Process(4, 3, 6, 3)
    ]
    intelligent_scheduler(processes)
    display_results(processes)